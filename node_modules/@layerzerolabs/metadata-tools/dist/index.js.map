{"version":3,"sources":["../src/config-metadata.ts"],"names":[],"mappings":"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","sourcesContent":["import type { OmniEdgeHardhat } from '@layerzerolabs/devtools-evm-hardhat'\nimport type { OAppEdgeConfig } from '@layerzerolabs/ua-devtools'\nimport { IMetadata } from './types'\nimport { TwoWayConfig } from './types'\n\nconst METADATA_URL = process.env.LZ_METADATA_URL || 'https://metadata.layerzero-api.com/v1/metadata'\n\nfunction getEndpointIdDeployment(eid: number, metadata: IMetadata) {\n    const srcEidString = eid.toString()\n    for (const objectKey in metadata) {\n        const entry = metadata[objectKey]\n\n        if (typeof entry?.deployments !== 'undefined') {\n            for (const deployment of entry.deployments) {\n                if (srcEidString === deployment.eid) {\n                    return deployment\n                }\n            }\n        }\n    }\n\n    throw new Error(`Can't find endpoint with eid: \"${eid}\",`)\n}\n\nexport function DVNsToAddresses(dvns: string[], chainKey: string, metadata: IMetadata) {\n    if (dvns.length === 0) {\n        return []\n    }\n\n    const dvnAddresses: string[] = []\n    const seenDVNs = new Set<string>()\n\n    if (!metadata[chainKey]?.dvns) {\n        throw new Error(`Can't find DVNs for chainKey: \"${chainKey}\".`)\n    }\n\n    const metadataDVNs = Object.entries(metadata[chainKey].dvns)\n\n    for (const dvn of dvns) {\n        if (seenDVNs.has(dvn)) {\n            throw new Error(`Duplicate DVN name found: \"${dvn}\".`)\n        }\n        seenDVNs.add(dvn)\n\n        let i = 0\n        for (const [dvnAddress, dvnDetails] of metadataDVNs) {\n            if (\n                !dvnDetails.deprecated &&\n                dvnDetails.canonicalName === dvn &&\n                !dvnDetails.lzReadCompatible &&\n                dvnDetails.version === 2\n            ) {\n                dvnAddresses.push(dvnAddress)\n                break\n            }\n\n            if (i === metadataDVNs.length - 1) {\n                throw new Error(\n                    `Can't find DVN: \"${dvn}\" on chainKey: \"${chainKey}\". Double check you're using valid DVN canonical name (not an address).`\n                )\n            }\n\n            i++\n        }\n    }\n\n    if (dvns.length !== dvnAddresses.length) {\n        throw new Error(`Can't find all DVNs: \"${dvns.join(', ')}\".`)\n    }\n\n    return dvnAddresses.sort()\n}\n\nfunction isSolanaDeployment(deployment: { chainKey: string; executor?: { pda?: string; address?: string } }) {\n    return deployment.chainKey.startsWith('solana')\n}\n\nexport async function translatePathwayToConfig(\n    pathway: TwoWayConfig,\n    metadata: IMetadata\n): Promise<OmniEdgeHardhat<OAppEdgeConfig | undefined>[]> {\n    const configs: OmniEdgeHardhat<OAppEdgeConfig | undefined>[] = []\n\n    const sourceContract = pathway[0]\n    const destinationContract = pathway[1]\n    const [requiredDVNs, optionalDVNConfig] = pathway[2]\n    const [sourceToDestinationConfirmations, destinationToSourceConfirmations] = pathway[3]\n    const [enforcedOptionsSrcToDst, enforcedOptionsDstToSrc] = pathway[4]\n\n    const optionalDVNs = optionalDVNConfig[0]\n    const optionalDVNThreshold = optionalDVNConfig[1] || 0\n\n    if (optionalDVNThreshold > (optionalDVNs?.length || 0)) {\n        throw new Error(`Optional DVN threshold is greater than the number of optional DVNs.`)\n    }\n\n    const sourceLZDeployment = getEndpointIdDeployment(sourceContract.eid, metadata)\n    const destinationLZDeployment = getEndpointIdDeployment(destinationContract.eid, metadata)\n\n    const sourceExecutor = isSolanaDeployment(sourceLZDeployment)\n        ? sourceLZDeployment.executor?.pda\n        : sourceLZDeployment.executor?.address\n\n    if (!sourceExecutor) {\n        throw new Error(`Can't find executor for source endpoint with eid: \"${sourceContract.eid}\".`)\n    }\n\n    const sourceRequiredDVNs = DVNsToAddresses(requiredDVNs, sourceLZDeployment.chainKey, metadata)\n    const destinationRequiredDVNs = DVNsToAddresses(requiredDVNs, destinationLZDeployment.chainKey, metadata)\n\n    let sourceOptionalDVNs: string[] = []\n    let destinationOptionalDVNs: string[] = []\n\n    if (optionalDVNs) {\n        sourceOptionalDVNs = DVNsToAddresses(optionalDVNs, sourceLZDeployment.chainKey, metadata)\n        destinationOptionalDVNs = DVNsToAddresses(optionalDVNs, destinationLZDeployment.chainKey, metadata)\n    }\n\n    if (!sourceLZDeployment.sendUln302 || !sourceLZDeployment.receiveUln302 || !sourceLZDeployment.executor) {\n        throw new Error(\n            `Can't find sendUln302, receiveUln302 or executor for source endpoint with eid: \"${sourceContract.eid}\".`\n        )\n    }\n\n    if (\n        !destinationLZDeployment.sendUln302 ||\n        !destinationLZDeployment.receiveUln302 ||\n        !destinationLZDeployment.executor\n    ) {\n        throw new Error(\n            `Can't find sendUln302, receiveUln302 or executor for destination endpoint with eid: \"${destinationContract.eid}\".`\n        )\n    }\n\n    const sourceToDestinationConfig: OmniEdgeHardhat<OAppEdgeConfig> = {\n        from: sourceContract,\n        to: destinationContract,\n        config: {\n            sendLibrary: sourceLZDeployment.sendUln302.address,\n            receiveLibraryConfig: {\n                receiveLibrary: sourceLZDeployment.receiveUln302.address,\n                gracePeriod: BigInt(0),\n            },\n            sendConfig: {\n                executorConfig: {\n                    maxMessageSize: 10000,\n                    executor: sourceExecutor,\n                },\n                ulnConfig: {\n                    confirmations: BigInt(sourceToDestinationConfirmations),\n                    requiredDVNs: sourceRequiredDVNs,\n                    optionalDVNs: sourceOptionalDVNs,\n                    optionalDVNThreshold,\n                },\n            },\n            enforcedOptions: enforcedOptionsSrcToDst,\n        },\n    }\n\n    const destinationToSourceConfig: OmniEdgeHardhat<OAppEdgeConfig> = {\n        from: destinationContract,\n        to: sourceContract,\n        config: {\n            sendLibrary: destinationLZDeployment.sendUln302.address,\n            receiveLibraryConfig: {\n                receiveLibrary: destinationLZDeployment.receiveUln302.address,\n                gracePeriod: BigInt(0),\n            },\n            receiveConfig: {\n                ulnConfig: {\n                    confirmations: BigInt(sourceToDestinationConfirmations),\n                    requiredDVNs: destinationRequiredDVNs,\n                    optionalDVNs: destinationOptionalDVNs,\n                    optionalDVNThreshold,\n                },\n            },\n        },\n    }\n\n    if (destinationToSourceConfirmations) {\n        const destinationExecutor = isSolanaDeployment(destinationLZDeployment)\n            ? destinationLZDeployment.executor?.pda\n            : destinationLZDeployment.executor?.address\n\n        if (!destinationExecutor) {\n            throw new Error(`Can't find executor for destination endpoint with eid: \"${destinationContract.eid}\".`)\n        }\n\n        sourceToDestinationConfig.config.receiveConfig = {\n            ulnConfig: {\n                confirmations: BigInt(destinationToSourceConfirmations),\n                requiredDVNs: sourceRequiredDVNs,\n                optionalDVNs: sourceOptionalDVNs,\n                optionalDVNThreshold,\n            },\n        }\n\n        destinationToSourceConfig.config.enforcedOptions = enforcedOptionsDstToSrc\n\n        destinationToSourceConfig.config.sendConfig = {\n            executorConfig: {\n                maxMessageSize: 10000,\n                executor: destinationExecutor,\n            },\n            ulnConfig: {\n                confirmations: BigInt(destinationToSourceConfirmations),\n                requiredDVNs: destinationRequiredDVNs,\n                optionalDVNs: destinationOptionalDVNs,\n                optionalDVNThreshold,\n            },\n        }\n    }\n\n    configs.push(sourceToDestinationConfig)\n    configs.push(destinationToSourceConfig)\n\n    return configs\n}\n\nexport async function generateConnectionsConfig(pathways: TwoWayConfig[]) {\n    const metadata = (await fetch(METADATA_URL).then((res) => res.json())) as IMetadata\n    const connections: OmniEdgeHardhat<OAppEdgeConfig | undefined>[] = []\n\n    for (const pathway of pathways) {\n        connections.push(...(await translatePathwayToConfig(pathway, metadata)))\n    }\n\n    return connections\n}\n"]}